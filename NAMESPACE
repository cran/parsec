exportPattern("^[[:alpha:]]+")
S3method(AF, default)
S3method(AF, wprof)
S3method(average_ranks, cover)
S3method(average_ranks, incidence)
S3method(colevels, cover)
S3method(colevels, incidence)
S3method(cover2incidence, cover)
S3method(depths, cover)
S3method(depths, incidence)
S3method(downset, cover)
S3method(downset, incidence)
S3method(equivalences, cover)
S3method(equivalences, incidence)
S3method(FOD, wprof)
S3method(getzeta, wprof)
S3method(heights, cover)
S3method(heights, incidence)
S3method(incidence2cover, incidence)
S3method(incomp, incidence)
S3method(latex, cover)
S3method(latex, incidence)
S3method(latex, wprof)
S3method(levels, cover)
S3method(levels, incidence)
S3method(LE2incidence, default)
S3method(LE2incidence, list)
S3method(maximal, cover)
S3method(maximal, incidence)
S3method(merge, wprof)
S3method(minimal, cover)
S3method(minimal, incidence)
S3method(mrg, character)
S3method(mrg, incidence)
S3method(obsprof, wprof)
S3method(parsec2igraph, cover)
S3method(parsec2igraph, incidence)
S3method(plot, average_ranks)
S3method(plot, cover)
S3method(plot, incidence)
S3method(plot, parsec)
S3method(plot, rank_stability)
S3method(plot, wprof)
S3method(popelem, wprof)
S3method(rank_stability, FODposet)
S3method(rmProfiles, wprof)
S3method(runC, pre_parsec)
S3method(runC, pre_parsec_simp)
S3method(summary, cover)
S3method(summary, incidence)
S3method(summary, parsec)
S3method(transitiveClosure, cover)
S3method(transitiveClosure, default)
S3method(transitiveClosure, incidence)
S3method(upset, cover)
S3method(upset, incidence)
S3method(rank_stability, FODposet)
S3method(FOD, wprof)
S3method(FFOD, wprof)
S3method(MRP, incidence)
importFrom("grDevices", "dev.interactive", "devAskNewPage", "gray")
importFrom("graphics", "abline", "axis", "barplot", "lines", "matplot", "plot", "points", "segments", "text")
importFrom("stats", "weighted.mean")
importFrom("utils", "setTxtProgressBar", "txtProgressBar", "type.convert")
importFrom("igraph", "graph_from_adjacency_matrix")
importFrom("netrankr", "exact_rank_prob", "mcmc_rank_prob", "approx_rank_relative")
importFrom("grDevices", "rgb")
importFrom("stats", "rnorm")
importFrom("methods", "is")
useDynLib(parsec, .registration = TRUE, .fixes = "C_")